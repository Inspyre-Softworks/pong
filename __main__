#!/usr/bin/env python3

import sys
import argparse
import lib.helpers.dev as dev
from lib.helpers.logger import start

if '+V' in sys.argv:
    print('Logging even before parsing arguments')
    debug = True
else:
    debug = False

help_mode = False

if '~h' in sys.argv or '~~help' in sys.argv:
    help_mode = True

log = start('InsPyPong', debug)
log.debug('Logger started')

parser = argparse.ArgumentParser(
    prog='Pong by Inspyre Softworks',
    usage='python3 __main__.py ~p1=<P1 NAME> ~p1c=<COLOR NAME OR HEX STRING> ~p2=<P2 NAME> ~p2c=<COLOR NAME OR HEX '
          'STRING>',
    description='Pong (by Inspyre Softworks) is just as it seems; our version of the Atari hit; Pong',
    epilog='Enjoy your game session',
    add_help=True,
    allow_abbrev=True,
    prefix_chars='~+'
    )

dev_mode = False

if dev.check():
    if help_mode:
        log.debug('Adding dev-mode to list of arguments')

    parser.add_argument(
        '+dev', '+dev-mode',
        action='store_true',
        help='Super-Duper Dev Mode',
        dest='dev_mode')

    dev_mode = True

# Assign arguments that will set attributes for player 1
parser.add_argument(
    '~p1', '~~player1-name',
    required=False,
    action='store',
    default='Player One',
    dest='p1',
    help='Specify a name for player one from the command-line. One white-space is allowed in this '
         'argument'
    )

parser.add_argument(
    '~p1c', '~~player1-paddle-color',
    required=False,
    action='store',
    default='red',
    dest='p1_paddle_color',
    help='Designate the color you\'d like the Player One paddle to be',
    )

# Asssign arguments that will set attributes for player 2
parser.add_argument(
    '~p2', '~~player2-name',
    required=False,
    action='store',
    default='Player Two',
    dest='p2',
    help='Specify a name for player two from the command-line. One white-space is allowed in this '
         'argument'
    )

parser.add_argument(
    '~p2c', '~~player2-paddle-color',
    required=False,
    action='store',
    default='white',
    dest='p2_paddle_color',
    help='Designate the color you\'d like the Player Two paddle to be',
    )

# Assign arguments that will allow changing of log output verbosity
parser.add_argument(
    '+v', '~~verbose',
    required=False,
    action='store_true',
    default=False,
    dest='verbose',
    help='Program will output all information that it finds might be useful to the end-user(s)'
    )

parser.add_argument(
    '+D', '~~debug',
    required=False,
    action='store_true',
    default=False,
    dest='debug',
    help='Program will output all logs. (This data is essentially useless to non-developers or non-curious)'
    )

parser.add_argument(
    '+q', '~~quiet',
    required=False,
    action='store_true',
    default=True,
    dest='quiet',
    help='Program will supress all logs that are not of level WARNING and above.'
    )

# ToDo:
#     Assign arguments that will set attributes for the Ball
#     Assign arguments that will set attributes for the playing field/screen
#     Assign arguments that will redirect logging output (maybe)

args = parser.parse_args()

# If we're in dev-mode, print the dev-mode banner
if dev_mode:
    if args.dev_mode:
        dev.print_banner()

log.debug(f'My runtime configuration is: {args}')

if args.p1 == 'Player One' or args.p2 == 'Player Two':
    from lib.pong.gui.start_screen import StartScreen

    StartScreen(args.p1, args.p2, dev_mode=dev_mode)
else:
    import old_pong
